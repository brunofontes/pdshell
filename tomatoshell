#!/usr/bin/env bash

# written by Nicolai Brand (lytix), 01.01.2022
# edited by Bruno Fontes, 23.02.2022

HELP="
-t,  --time,       time for every session in minutes [default:15 minutes]
-d,  --delay,      delay between sessions in minutes [default:5 minutes]
-m,  --music,      chose song for 'play' to play during each session
-n,                total sessions [default:4]
-f,                figlet on
-s,  --song,       full path to song to be played by cmus
-o,  --oxo,        locks the OXO KDE Activity in place during sessions
-sc, --start-cmd,  bash command that will run at the start of a pomodoro
-ec, --end-cmd,    bash command that will run at the end of a pomodoro
-h,  --help,       shows this"

TIME=25
DELAY=5
SESSIONS=4

# 0 -> off, 1 -> on
MUSIC=1
FIGLET=0

ALARM="$HOME/Apps/tomatoshell/alarm.wav"
#SONG="/home/bruno/Apps/tomatoshell/music/focus_001.mp3"
#SONG=$(ls /home/bruno/Apps/tomatoshell/music/*.mp3 | sort -R | tail -1) #Choose a random music

# colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;34m"
FIN="\033[0m"

# argument handling
while [[ $# -gt 0 ]]
do
    case $1 in
        -t|--time)
            TIME="$2"
            shift && shift # past argument and value
            ;;
        -o|--oxo)
            SC="/home/bruno/Apps/linuxShortcuts/KDE/lockOXO.sh"
            EC="killall lockOXO.sh"
            shift
            ;;
        -d|--delay)
            DELAY="$2"
            shift && shift
            ;;
        -m|--music)
            MUSIC=1
            shift
            ;;
        -n)
            SESSIONS="$2"
            shift && shift
            ;;
        -f)
            FIGLET=1
            shift
            ;;
        -s|--song)
            SONG="$2"
            shift && shift
            ;;
        -h|--help)
            echo -e "$HELP"
            exit 0
            ;;
        -sc|--start-cmd)
            SC="$2"
            shift && shift
            ;;
        -ec|--end-cmd)
            EC="$2"
            shift && shift
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

countdown() {
    # args: $1 -> length of countdown in seconds, $2, session number (-1 = break)
    msg="🍅Time left of session $2/$SESSIONS:🍅"
    [ "$2" -eq -1 ] && msg="🍅Time left of break:🍅"
    # date in seconds when countdown will end
    start=$(($(date +%s) + $1)); 

    while [ "$start" -ge "$(date +%s)" ]
    do
        # due to the rendering of emoji's, the text needs to be offset to appear at the center
        print_offset=10
        [ $FIGLET -eq 1 ] && clear && printf "%*s\n" $(((${#msg}+$COLUMNS+$print_offset)/2)) "$msg" \
        && echo -ne "$(date -u --date @$((start - $(date +%s))) +%M:%S)\r" | figlet -c -t ||
        echo -ne "$CYAN\Uf061 $YELLOW $(date -u --date @$((start - $(date +%s))) +%M:%S)$FIN  🍅\r"
        # sleeping for one second between each print to stdout uses less cpu power, but will make the countdown have a discrepency of 1s which is negligable
        # lower number -> more cpu usages -> less time discrepency on stdout
        sleep 1
    done
   
    # session finished
    clear
    [ $2 -ne -1 ] && notify-send -t 10000 -u "normal" "Session number $2 finished"
    
    # message when session is finished
    if [ $FIGLET -eq 1 ]
    then
        [ $2 -ne -1 ] && figlet -c -t "Session $2/$SESSIONS finished" || figlet -c -t "Break finished"
    else

        [ $2 -ne -1 ] && echo -ne ""$GREEN"Session $2/$SESSIONS finished$FIN" || echo -ne "$GREEN""Break finished$FIN"
        echo -e " (`date +"%X"`)"
    fi
    
    # stop music before alarm
    [ $MUSIC -eq 1 ] && music_pause

    # when session is finished, start the alarm
    printf "Press 's' to stop alarm"
    [ $2 -eq -1 ] && echo " and start next session" || echo ""

    # turn on keypress again
    stty echo

    process_name="aplay_tomatoshell"
    while :
    do
        # play alarm sound indefinetely until the 's' key is pressed
        # alsa
        # aplay -d 0 $ALARM &>/dev/null & read -t 0.01 -r -s -N 1
        [ -e /proc/"$(pidof "$process_name")"/status ] || 
            bash -c "exec -a \"$process_name\" aplay \"$ALARM\" >/dev/null 2>&1" & read -t 0.01 -r -s -n 1
    
        if [[ $REPLY == 's' ]]
        then 
            #echo -en "\r                                                  \r"
            # pkill -f aplay >/dev/null 2>&1
            sleep 0.3
            pkill -f "$process_name" >/dev/null 2>&1
            break
        fi
        sleep 1
    done
    # turn off keypress after input received
    stty -echo
    return 0
}

exit_p() {
    # turn on cursor again
    tput cnorm
    # turn on keyboard input again
    stty echo
    "${EC}" >/dev/null 2>&1 &
    [ $MUSIC -eq 1 ] && pkill -f play >/dev/null 2>&1
    echo -e ""$RED"\nexiting$FIN"
    exit $1
}

music_pause() {
    pkill -f play >/dev/null 2>&1
    "${EC}" >/dev/null 2>&1
}

music_start() {
    "${SC}" &>/dev/null &
    [ -z $SONG ] && SONG=$(ls /home/bruno/Apps/tomatoshell/music/*.mp3 | sort -R | tail -1) #Choose a random music
    play "$SONG" >/dev/null 2>&1 &
}
 
main() {
    # when SIGINT is received, exit
    # necessary because 
    trap "exit_p" 2
    # turn off keyboard input
    stty -echo

    # convert time and delay to from minutes to seconds
    # have to divide by 1 to always get integer result
    TIME=$(echo "($TIME * 60)/1" | bc)
    DELAY=$(echo "($DELAY * 60)/1" | bc)

    # turn off cursor
    tput civis

    for ((i = 1; i <= $SESSIONS; i++))
    do
        # session
        clear
        echo "Time left of session $i/$SESSIONS:"
        [ $MUSIC -eq 1 ] && music_start
        countdown $TIME $i

        # break
        # don't want to have a break after last session
        [ $i -ne $SESSIONS ] && clear && echo "Time left of break:" && countdown $DELAY -1
    done
}

main
exit_p 0
