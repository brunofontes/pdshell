#!/usr/bin/env bash

# written by Nicolai Brand (lytix), 01.01.2022
# edited by Bruno Fontes, 23.02.2022

NAME="pdshell"

HELP="
During a pomodoro, you can use the following shotcuts:
r - reset a pomodoro
p - pause the pomodoro (it restart the pomo afterwards)
n - (temporary) advance to the last second of the actual pomo
q - quit

CMD parameters available:

-t,    --time,                  time for every session in minutes [default:25 minutes]
-d,    --delay,                 delay between sessions in minutes [default:5 minutes]
-m,    --music,                 choose a mp3 file or a folder of mp3s to play during each session
-n,                             total sessions [default:4]
-f,                             figlet on
-s,    --song,                  path to mp3 or folder of mp3s to play during each session
-c,    --config,                read an alternative config file
-nc,   --no-config,             ignore the default config file

-sc,   --start-cmd,             *bash command that will run at the start of a pomodoro
-ec,   --end-cmd,               *bash command that will run at the end of a pomodoro

-ssbc, --start-short-break-cmd, *bash command that will run at the start of a short break
-esbc, --end-short-break-cmd,   *bash command that will run at the end of a short break

-slbc, --start-long-break-cmd,  *bash command that will run at the start of a long break
-elbc, --end-long-break-cmd,    *bash command that will run at the end of a long break

       --install,               Install the program to be run from anywhere
       --uninstall,             Uninstall the program

-h,    --help,                  shows this help

* You can add multiple commands by including the prefix again. Example:
$NAME -sc \"play ~/music.mp3\" -sc \"start_todo.sh\"
"

TIME=25
DELAY=5
LONG_DELAY=30
SESSIONS=4

# 0 -> off, 1 -> on
MUSIC=1
FIGLET=0

OWN_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
SONG="$HOME/Music"
SHARE_FOLDER="$HOME/.local/share/$NAME/"
ALARM="$SHARE_FOLDER/alarm.wav"

PLAYER="/usr/bin/play -q"

CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/$NAME.conf"


# colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;34m"
FIN="\033[0m"


for ((i=1 ; i <= $# ; i++))
do
    case ${@:$i:1} in
        -c|--config)
            ((i++))
            CONFIG="${@:$i:1}"
            break
            ;;
        -nc|--no-config)
            unset CONFIG
            break
            ;;
    esac
done

# Read the configuration file
if [[ -r $CONFIG ]]
then
    source $CONFIG
fi

# argument handling
while [[ $# -gt 0 ]]
do
    case $1 in
        -c|--config)
            shift && shift
            ;;
        -nc|--no-config)
            shift
            ;;
        --install)
            sudo cp --force "$NAME" "/usr/local/bin/"
            cp --no-clobber config.conf $CONFIG
            mkdir -p "$SHARE_FOLDER"
            cp alarm.wav "$ALARM"
            echo "$NAME installed. Check the configuration file on: $CONFIG"
            exit 0
            ;;
        --uninstall)
            sudo rm "/usr/local/bin/$NAME"
            rm -rf "$SHARE_FOLDER"
            echo "$NAME uninstalled."
            exit 0
            ;;
        -t|--time)
            TIME="$2"
            shift && shift # past argument and value
            ;;
        -d|--delay)
            DELAY="$2"
            shift && shift
            ;;
        -m|--music)
            MUSIC=1
            shift
            ;;
        -nm|--no-music)
            MUSIC=0
            shift
            ;;
        -n)
            SESSIONS="$2"
            shift && shift
            ;;
        -f)
            FIGLET=1
            shift
            ;;
        -s|--song)
            SONG="$2"
            shift && shift
            ;;
        -h|--help)
            echo -e "$HELP"
            exit 0
            ;;
        -sc|--start-cmd)
            SC+=("$2")
            shift && shift
            ;;
        -ec|--end-cmd)
            EC+=("$2")
            shift && shift
            ;;
        -ssbc|--start-short-break-cmd)
            SSBC+=("$2")
            shift && shift
            ;;
        -esbc|--end-short-break-cmd)
            ESBC+=("$2")
            shift && shift
            ;;
        -slbc|--start-long-break-cmd)
            SSBC+=("$2")
            shift && shift
            ;;
        -elbc|--end-long-break-cmd)
            ESBC+=("$2")
            shift && shift
            ;;
        *)
            echo "Unknown option $1"
            echo "Type $NAME --help to view help window"
            exit 1
            ;;
    esac
done

shortcuts() {
    local answer=$1
    case $answer in
        $letter)
            exec $letcmd &>/dev/null &
            ;;
        r)
            start=$(($(date +%s) + $1));
            ;;
        p)
            echo -en "$RED Paused.$FIN Press enter to reset pomodoro...$FIN"
            read
            start=$(($(date +%s) + $1));
            echo -en "\r                                                  \r"
            ;;
        n)
            start=$(date +%s)
            ;;
        q)
            exit_p
            ;;
    esac
}

countdown() {
    # args: 
    #   $1 -> length of countdown in seconds
    #   $2 -> session number (-1 = break)
    #   $3 -> end cmd to run

    msg="🍅Time left of session $2/$SESSIONS:🍅"
    [ "$2" -eq -1 ] && msg="🍅Time left of break:🍅"
    local end_cmd=$3
    # date in seconds when countdown will end
    start=$(($(date +%s) + $1)); 

    # check if alarm file exists
    check_files_exist

    while [ "$start" -ge "$(date +%s)" ]
    do
        read -t 0.1 -r -s -n 1
        shortcuts $REPLY
            
        # due to the rendering of emoji's, the text needs to be offset to appear at the center
        print_offset=10
        [ $FIGLET -eq 1 ] && clear && printf "%*s\n" $(((${#msg}+$COLUMNS+$print_offset)/2)) "$msg" \
        && echo -ne "$(date -u --date @$((start - $(date +%s))) +%M:%S)\r" | figlet -c -t ||
        echo -ne "$CYAN\Uf061 $YELLOW $(date -u --date @$((start - $(date +%s))) +%M:%S)$FIN  🍅\r"
        # sleeping for one second between each print to stdout uses less cpu power, but will make the countdown have a discrepency of 1s which is negligable
        # lower number -> more cpu usages -> less time discrepency on stdout
        sleep 1
    done
   
    # session finished
    clear
    [ $2 -ne -1 ] && notify-send -t 10000 -u "normal" "Session number $2 finished"
    
    # message when session is finished
    if [ $FIGLET -eq 1 ]
    then
        [ $2 -ne -1 ] && figlet -c -t "Session $2/$SESSIONS finished" || figlet -c -t "Break finished"
    else
        [ $2 -ne -1 ] && echo -e ""$GREEN"Session $2/$SESSIONS finished$FIN" || echo -e "$GREEN""Break finished$FIN"
    fi
    
    # stop music before alarm
    [ $MUSIC -eq 1 ] && music_pause
    eval $end_cmd

    # when session is finished, start the alarm
    printf "\nPress 's' to stop alarm"
    [ $2 -eq -1 ] && echo " and start next session" || echo ""
    printf "Press 'r' to restart last pomodoro\n"
    printf "Press 'q' to quit\n"

    RETURN_CODE=0
    local alarm_pid="99999999"
    while true
    do
        # play alarm sound indefinetely until the 's' key is pressed
        ps -p $alarm_pid &>/dev/null || eval "$PLAYER $ALARM &>/dev/null &" && alarm_pid=$!
        
        read -t 0.1 -r -s -n 1
        case $REPLY in
            r)
                RETURN_CODE=1
                break
                ;;
            s)
                break
                ;;
            q)
                kill $alarm_pid &>/dev/null
                exit_p
                ;;
        esac
        sleep 0.5
    done
    sleep 0.3
    kill $alarm_pid &>/dev/null

    # turn off keypress after input received
    stty -echo
    return 0
}

exit_p() {
    $EC &>/dev/null &
    # turn on cursor again
    tput cnorm
    # turn on keyboard input again
    stty echo
    [ $MUSIC -eq 1 ] && music_pause
    cmd_end
    short_break_stop
    long_break_stop
    echo -e ""$RED"\nexiting$FIN"

    exit $1
}

music_pause() {
    [ $SONG_PID ] && kill $SONG_PID >/dev/null 2>&1 &
}

cmd_start() {
    for cmd in "${SC[@]}"
    do
        exec $cmd &>/dev/null &
        SC_PID+=("$!")
    done
}

cmd_end() {
    if [ "${#EC[*]}" -gt 0 ]
    then
        for cmd in "${EC[@]}"
        do
            eval $cmd &>/dev/null &
        done
        unset SC_PID
        return
    fi

    kill_own_pids SC_PID[@]
    unset SC_PID
}

kill_own_pids() {
    declare -a PIDS=("${!1}")
    for pd in "${PIDS[@]}"
    do
        parentpid=`/bin/ps -o ppid= -p "$pd"`
        if [ $parentpid -a $parentpid == $OWN_PID ]
        then
            kill $pd &>/dev/null &
        fi
    done
    return 0
}

music_start() {
    [[ -z $SONG ]] && return
    local play="\"$SONG\""

    if [ -d "$SONG" ]
    then 
        #Choose a random music
        play="$(ls -Q $SONG/* 2>/dev/null | sort -R | tr '\n' ' ')"
    fi
    [ "$play" ] && eval "$PLAYER $play &>/dev/null &"
    SONG_PID=$!
}

short_break_start() {
    for cmd in "${SSBC[@]}"
    do
        exec $cmd &>/dev/null &
        SSBC_PID+=("$!")
    done
}
 
short_break_stop() {
    if [ "${#ESBC[*]}" == 0 ]
    then
        kill_own_pids SSBC_PID[@]
        unset SSBC_PID
        return
    fi

    for cmd in "${ESBC[@]}"
    do
        eval $cmd &>/dev/null &
    done
    unset SSBC_PID
}

long_break_start() {
    for cmd in "${SLBC[@]}"
    do
        exec $cmd &>/dev/null &
        SLBC_PID+=("$!")
    done
}
 
long_break_stop() {
    if [ "${#ELBC[*]}" == 0 ]
    then
        kill_own_pids SLBC_PID[@]
        unset SLBC_PID
        return
    fi

    for cmd in "${ELBC[@]}"
    do
        eval $cmd &>/dev/null &
    done
    unset SLBC_PID
}

check_files_exist() {
    if ! [[ -f $ALARM ]]
    then
        echo -e "\n${RED}Warning! ${FIN}\"${YELLOW}${ALARM}${FIN}\" file not found!"
        echo -e "Did you ran '$ ${YELLOW}./pdshell --install${FIN}'?\n"
    fi
}

main() {
    # when SIGINT is received, exit
    # necessary because 
    trap "exit_p" 2
    # turn off keyboard input
    stty -echo

    # convert time and delay to from minutes to seconds
    # have to divide by 1 to always get integer result
    TIME=$(echo "($TIME * 60)/1" | bc)
    DELAY=$(echo "($DELAY * 60)/1" | bc)
    LONG_DELAY=$(echo "($LONG_DELAY * 60)/1" | bc)

    OWN_PID=$$

    # turn off cursor
    tput civis

    while true
    do
        for ((i = 1; i <= $SESSIONS; i++))
        do
            # session
            clear
            echo "Time left of session $i/$SESSIONS:"
            [ $MUSIC -eq 1 ] && music_start
            cmd_start
            countdown $TIME $i cmd_end
            if [ $RETURN_CODE == 1 ]
            then
                ((i--))
                RETURN_CODE=0
                continue
            fi

            # don't want to have a break after last session
            if [ $i -ne $SESSIONS ]
            then
                clear
                echo "Time left of break:"
                short_break_start
                countdown $DELAY -1 short_break_stop
            fi

            if [ $RETURN_CODE == 1 ]
            then
                ((i--))
                RETURN_CODE=0
                continue
            fi

        done
        clear
        echo "Time left of long break:" 
        long_break_start
        countdown $LONG_DELAY -1 long_break_stop
   done
}

main
exit_p 0
