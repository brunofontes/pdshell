#!/usr/bin/env bash

# written by Nicolai Brand (lytix), 01.01.2022
# edited by Bruno Fontes, 23.02.2022

HELP="
During a pomodoro, you can use the following shotcuts:
r - reset a pomodoro
p - pause the pomodoro (it restart the pomo afterwards)
n - (temporary) advance to the last second of the actual pomo
q - quit

CMD parameters available:

-t,    --time,                  time for every session in minutes [default:25 minutes]
-d,    --delay,                 delay between sessions in minutes [default:5 minutes]
-m,    --music,                 chose song for 'aplay' to play during each session
-n,                             total sessions [default:4]
-f,                             figlet on
-s,    --song,                  full path to song to be played by aplay
-c,    --config,                read an alternative config file

-sc,   --start-cmd,             *bash command that will run at the start of a pomodoro
-ec,   --end-cmd,               *bash command that will run at the end of a pomodoro

-ssbc, --start-short-break-cmd, *bash command that will run at the start of a short break
-esbc, --end-short-break-cmd,   *bash command that will run at the end of a short break

-slbc, --start-long-break-cmd,  *bash command that will run at the start of a long break
-elbc, --end-long-break-cmd,    *bash command that will run at the end of a long break

       --install,               Install the config file to \"$HOME/.config/pdshell.conf\" and abort

-h,    --help,                  shows this help

* You can add multiple commands by including the prefix again. Example:
pdshell -sc \"play ~/music.mp3\" -sc \"myscript.sh\"
"

TIME=25
DELAY=5
LONG_DELAY=30
SESSIONS=4

# 0 -> off, 1 -> on
MUSIC=1
FIGLET=0

OWN_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
ALARM="$OWN_PATH/alarm.wav"

CONFIG="$HOME/.config/pdshell.conf"

# colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;34m"
FIN="\033[0m"


# Read the configuration file
if [ -r $CONFIG ]
then
    source $CONFIG
fi

# argument handling
while [[ $# -gt 0 ]]
do
    case $1 in
        --install)
            cp --no-clobber config.conf $CONFIG
            echo "Config file installed on: $CONFIG"
            exit 0
            ;;
        -t|--time)
            TIME="$2"
            shift && shift # past argument and value
            ;;
        -d|--delay)
            DELAY="$2"
            shift && shift
            ;;
        -m|--music)
            MUSIC=1
            shift
            ;;
        -nm|--no-music)
            MUSIC=0
            shift
            ;;
        -n)
            SESSIONS="$2"
            shift && shift
            ;;
        -f)
            FIGLET=1
            shift
            ;;
        -s|--song)
            SONG="$2"
            shift && shift
            ;;
        -h|--help)
            echo -e "$HELP"
            exit 0
            ;;
        -sc|--start-cmd)
            SC+=("$2")
            shift && shift
            ;;
        -ec|--end-cmd)
            EC+=("$2")
            shift && shift
            ;;
        -ssbc|--start-short-break-cmd)
            SSBC+=("$2")
            shift && shift
            ;;
        -esbc|--end-short-break-cmd)
            ESBC+=("$2")
            shift && shift
            ;;
        -slbc|--start-long-break-cmd)
            SSBC+=("$2")
            shift && shift
            ;;
        -elbc|--end-long-break-cmd)
            ESBC+=("$2")
            shift && shift
            ;;
        -c|--config)
            CONFIG="$2"
            shift && shift
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

countdown() {
    # args: $1 -> length of countdown in seconds, $2, session number (-1 = break)
    msg="🍅Time left of session $2/$SESSIONS:🍅"
    [ "$2" -eq -1 ] && msg="🍅Time left of break:🍅"
    # date in seconds when countdown will end
    start=$(($(date +%s) + $1)); 

    while [ "$start" -ge "$(date +%s)" ]
    do
        read -t 0.1 -r -s -n 1
        case $REPLY in
            $letter)
                exec $letcmd &
                ;;
            r)
                start=$(($(date +%s) + $1));
                ;;
            p)
                echo -en "$RED Paused.$FIN Press enter to reset pomodoro...$FIN"
                read
                start=$(($(date +%s) + $1));
                echo -en "\r                                                  \r"
                ;;
            n)
                start=$(date +%s)
                ;;
            q)
                exit_p
                ;;
        esac
            
        # due to the rendering of emoji's, the text needs to be offset to appear at the center
        print_offset=10
        [ $FIGLET -eq 1 ] && clear && printf "%*s\n" $(((${#msg}+$COLUMNS+$print_offset)/2)) "$msg" \
        && echo -ne "$(date -u --date @$((start - $(date +%s))) +%M:%S)\r" | figlet -c -t ||
        echo -ne "$CYAN\Uf061 $YELLOW $(date -u --date @$((start - $(date +%s))) +%M:%S)$FIN  🍅\r"
        # sleeping for one second between each print to stdout uses less cpu power, but will make the countdown have a discrepency of 1s which is negligable
        # lower number -> more cpu usages -> less time discrepency on stdout
        sleep 1
    done
   
    # session finished
    clear
    [ $2 -ne -1 ] && notify-send -t 10000 -u "normal" "Session number $2 finished"
    
    # message when session is finished
    if [ $FIGLET -eq 1 ]
    then
        [ $2 -ne -1 ] && figlet -c -t "Session $2/$SESSIONS finished" || figlet -c -t "Break finished"
    else
        [ $2 -ne -1 ] && echo -e ""$GREEN"Session $2/$SESSIONS finished$FIN" || echo -e "$GREEN""Break finished$FIN"
    fi
    
    # stop music before alarm
    [ $MUSIC -eq 1 ] && music_pause
    cmd_end

    # when session is finished, start the alarm
    printf "Press 's' to stop alarm"
    [ $2 -eq -1 ] && echo " and start next session" || echo ""

    # turn on keypress again
    stty echo

    process_name="aplay_pdshell"
    RETURN_CODE=0
    while true
    do
        # play alarm sound indefinetely until the 's' key is pressed
        
        if [ -z $(pidof "$process_name") ]
        then
            bash -c "exec -a $process_name aplay \"$ALARM\" &>/dev/null" &
        fi

        read -t 0.1 -r -s -n 1
        if [[ $REPLY == 'r' ]]
        then
            RETURN_CODE=1
            break
        fi
        if [[ $REPLY == 's' ]]
        then 
            break
        fi
        sleep 1
    done
    sleep 0.3
    pkill -f "$process_name" &>/dev/null
    sleep 0.1
    if [ $(pidof "$process_name") ]
    then
        pkill -9 -f "$process_name" &>/dev/null
    fi

    # turn off keypress after input received
    stty -echo
    return 0
}

exit_p() {
    $EC &>/dev/null &
    # turn on cursor again
    tput cnorm
    # turn on keyboard input again
    stty echo
    [ $MUSIC -eq 1 ] && music_pause
    cmd_end
    echo -e ""$RED"\nexiting$FIN"

    exit $1
}

music_pause() {
    [ $SONG_PID ] && kill $SONG_PID >/dev/null 2>&1 &
}


cmd_start() {
    for cmd in "${SC[@]}"
    do
        exec $cmd &>/dev/null &
        SC_PID+=("$!")
    done
}

cmd_end() {
    if [ "${#EC[*]}" -gt 0 ]
    then
        for cmd in "${EC[@]}"
        do
            eval $cmd &>/dev/null &
        done
        unset SC_PID
        return
    fi

    kill_own_pids SC_PID[@]
    unset SC_PID
}

kill_own_pids() {
    declare -a PIDS=("${!1}")
    for pd in "${PIDS[@]}"
    do
        parentpid=`/bin/ps -o ppid= -p "$pd"`
        if [ $parentpid -a $parentpid == $OWN_PID ]
        then
            kill $pd &>/dev/null &
        fi
    done
    return 0
}

music_start() {
    [ -z "$SONG" ] && SONG=$(ls $OWN_PATH/music/*.mp3 | sort -R | tail -1) #Choose a random music
    if [ -f "$SONG" ]
    then
        aplay "$SONG" >/dev/null 2>&1 &
    else
        $SONG &>/dev/null &
    fi
    [ $SONG ] && SONG_PID=$!
}

break_start() {
    if [ "${#SSBC[*]}" -gt 0 ]
    then
        exec $SSBC &>/dev/null &
        SSBC_PID=$!
    fi
}
 
break_stop() {
    if [ -z $ESBC ]
    then
        kill_own_pids SSBC_PID[@]
        unset SSBC_PID
    fi
    $ESBC &>/dev/null &
}

main() {
    # when SIGINT is received, exit
    # necessary because 
    trap "exit_p" 2
    # turn off keyboard input
    stty -echo

    # convert time and delay to from minutes to seconds
    # have to divide by 1 to always get integer result
    TIME=$(echo "($TIME * 60)/1" | bc)
    DELAY=$(echo "($DELAY * 60)/1" | bc)
    LONG_DELAY=$(echo "($LONG_DELAY * 60)/1" | bc)

    OWN_PID=$$

    # turn off cursor
    tput civis

    while true
    do
        for ((i = 1; i <= $SESSIONS; i++))
        do
            # session
            clear
            echo "Time left of session $i/$SESSIONS:"
            [ $MUSIC -eq 1 ] && music_start
            cmd_start
            countdown $TIME $i
            if [ $RETURN_CODE == 1 ]
            then
                ((i--))
                RETURN_CODE=0
                continue
            fi

            # don't want to have a break after last session
            [ $i -ne $SESSIONS ] && clear && echo "Time left of break:" && break_start && countdown $DELAY -1
            break_stop
        done
        clear
        echo "Time left of long break:" 
        break_start && countdown $LONG_DELAY -1
        break_stop
   done
}

main
exit_p 0
